sample(LETTERS)
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips[flips > 0])
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y =cars$speed)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$speed, y=cars$dist, xlab = "Speed")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub="My Plot Subtitle")
?plot
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch= 2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, mtcars)
hist(mtcars$mpg)
swirl()
swirl()
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("DataScienceCourse", key="be60309af47dbb60d905", secret = "0eded0165fd9513090ea313af36519e6ce33e5b8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken
)
stop_for_status(req)
content(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("DataScienceCourse", key="be60309af47dbb60d905", secret = "0eded0165fd9513090ea313af36519e6ce33e5b8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
library(httr)
endpoint <- oauth_app("github", key="be60309af47dbb60d905", secret = "0eded0165fd9513090ea313af36519e6ce33e5b8")
myapp <- oauth_app("github", key="be60309af47dbb60d905", secret = "0eded0165fd9513090ea313af36519e6ce33e5b8")
endpoint <- oauth_endpoints("github")
endpoint
github_token <- oauth2.0_token(github, myapp)
github_token <- oauth2.0_token(endpoint, myapp)
install.packages("httpuv")
github_token <- oauth2.0_token(endpoint, myapp)
library(swirl)
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
select(cran, -(5:20))
select(cran, -(X:size))
select(cran, -5:20)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparision
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "IN" | country == "US")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/ 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(cran, avg_size = mean(size))
summarize(by_package, avg_size = mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
swirl()
swirl()
demo()
demo(Hershey)
demo(graphics)
demo(image)
demo(plotmath)
demo(smooth)
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, into=c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
library(readr)
parse_number("class5")
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status= if(final <= 'B') "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
library(dplyr)
starwars %>%
group_by(species) %>%
summarise(
n = n(),
mass = mean(mass, na.rm = TRUE)
) %>%
print
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
f <- file.path(getwd(), "GDP.csv")
download.file(url, f)
dtGDP <- data.table(read.csv(f, skip = 4, nrows = 215))
dtGDP <- dtGDP[X != ""]
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP",
"Long.Name", "gdp"))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
f <- file.path(getwd(), "EDSTATS_Country.csv")
download.file(url, f)
dtEd <- data.table(read.csv(f))
dt <- merge(dtGDP, dtEd, all = TRUE, by = c("CountryCode"))
library(data.table)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
f <- file.path(getwd(), "GDP.csv")
download.file(url, f)
dtGDP <- data.table(read.csv(f, skip = 4, nrows = 215))
dtGDP <- dtGDP[X != ""]
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP",
"Long.Name", "gdp"))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
f <- file.path(getwd(), "EDSTATS_Country.csv")
download.file(url, f)
dtEd <- data.table(read.csv(f))
dt <- merge(dtGDP, dtEd, all = TRUE, by = c("CountryCode"))
dt2 <- as_tibble(dt)
dt2
dt2 %>% group_by(Income.Group) %>% summarise(mean(rankingGDP, na.rm = TRUE)) %>% print
breaks <- quantile(dt$rankingGDP, probs = seq(0, 1, 0.2), na.rm = TRUE)
breaks
dt$quantileGDP <- cut(dt$rankingGDP, breaks = breaks)
dt$quantileGDP
dt[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantileGDP")]
library(swirl)
swirl()
install.packages("lubridate")
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
now()
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
dmy("192012")
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms(03:22:14)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(now())
update(now())
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now(tzone = "America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes = 34)
depart
arrive <- nyc + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz()
?with_tz
arrive <- with_tz(arrive, tzone = ""Asia/Hong_Kong"")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong)
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
mdy("June 17, 2008")
last_time <- mdy("June 17, 2008")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks = 100)
rug(ppm)
hist(ppm, col="green")
abline(v = 12, lwd = 2)
abline(median((ppm), col = "magenta"))
abline(median(ppm), col = "magenta"))
abline(median(ppm), col = "magenta")
abline(median(ppm), col = "magenta", lwd=4)
abline(v= median(ppm), col = "magenta", lwd=4)
names(pollution)
reg table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(pm25 ~ region, data=pollution, col="red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, pollution$region == "east")
east <- subset(pollution, region == "east")
head(east)
hist(east)
hist(east, col = "green")
hist(east$pm25, col = "green")
east <- subset(pollution, region == "west")
ist(subset(pollution,region=="west")$pm25, col = "green")
hist(subset(pollution,region=="west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h=12, lwd = 2, lty = 2)
with(pollution, plot(latitude, pm25, col = region))
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, pollution$region == "west")
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main="West")
Eest <- subset(pollution, region == "Eest")
plot(east$latitude, east$pm25, main = "East")
swirl()
# English for Ubuntu
#Sys.setlocale("LC_TIME", "C")
library(dplyr)
library(data.table)
prepareData <- function(){
# read Data: file "household_power_consumption.txt" must be available in the working directory
data <- fread("./household_power_consumption.txt", header=TRUE, sep = ";", na.strings = c("?"), stringsAsFactors = FALSE)
# conver String to Date
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
# choose Data between 007-02-01 and 2007-02-02
data <- filter(data, Date >= as.Date("2007-2-1") & Date <= as.Date("2007-2-2"))
# merger Date and Time in new column
data <- data %>% mutate(Date_Time = paste(Date, Time, sep=" ")) %>% select(-c("Date", "Time"))
# Format dateTime Column
data$Date_Time <- as.POSIXct(data$Date_Time)
data
}
createPNGPlot <- function(file_name){
dev.copy(png,file_name,  height=480, width=480)
dev.off()
}
data <- prepareData()
with(data, {
plot(Date_Time, Sub_metering_1, type="l",
ylab="Energy sub metering", xlab="")
lines(Date_Time, Sub_metering_2,col='Red')
lines(Date_Time, Sub_metering_3,col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty = c(1,1,1), c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
createPNGPlot("plot3.png")
setwd("~/Desktop/Temp/ExData_Plotting1")
# English for Ubuntu
#Sys.setlocale("LC_TIME", "C")
library(dplyr)
library(data.table)
prepareData <- function(){
# read Data: file "household_power_consumption.txt" must be available in the working directory
data <- fread("./household_power_consumption.txt", header=TRUE, sep = ";", na.strings = c("?"), stringsAsFactors = FALSE)
# conver String to Date
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
# choose Data between 007-02-01 and 2007-02-02
data <- filter(data, Date >= as.Date("2007-2-1") & Date <= as.Date("2007-2-2"))
# merger Date and Time in new column
data <- data %>% mutate(Date_Time = paste(Date, Time, sep=" ")) %>% select(-c("Date", "Time"))
# Format dateTime Column
data$Date_Time <- as.POSIXct(data$Date_Time)
data
}
createPNGPlot <- function(file_name){
dev.copy(png,file_name,  height=480, width=480)
dev.off()
}
data <- prepareData()
with(data, {
plot(Date_Time, Sub_metering_1, type="l",
ylab="Energy sub metering", xlab="")
lines(Date_Time, Sub_metering_2,col='Red')
lines(Date_Time, Sub_metering_3,col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty = c(1,1,1), c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
createPNGPlot("plot3.png")
Sys.setlocale("LC_TIME", "C")
# English for Ubuntu
#Sys.setlocale("LC_TIME", "C")
library(dplyr)
library(data.table)
prepareData <- function(){
# read Data: file "household_power_consumption.txt" must be available in the working directory
data <- fread("./household_power_consumption.txt", header=TRUE, sep = ";", na.strings = c("?"), stringsAsFactors = FALSE)
# conver String to Date
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
# choose Data between 007-02-01 and 2007-02-02
data <- filter(data, Date >= as.Date("2007-2-1") & Date <= as.Date("2007-2-2"))
# merger Date and Time in new column
data <- data %>% mutate(Date_Time = paste(Date, Time, sep=" ")) %>% select(-c("Date", "Time"))
# Format dateTime Column
data$Date_Time <- as.POSIXct(data$Date_Time)
data
}
createPNGPlot <- function(file_name){
dev.copy(png,file_name,  height=480, width=480)
dev.off()
}
data <- prepareData()
with(data, {
plot(Date_Time, Sub_metering_1, type="l",
ylab="Energy sub metering", xlab="")
lines(Date_Time, Sub_metering_2,col='Red')
lines(Date_Time, Sub_metering_3,col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty = c(1,1,1), c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
createPNGPlot("plot3.png")
# English for Ubuntu
#Sys.setlocale("LC_TIME", "C")
library(dplyr)
library(data.table)
prepareData <- function(){
# read Data: file "household_power_consumption.txt" must be available in the working directory
data <- fread("./household_power_consumption.txt", header=TRUE, sep = ";", na.strings = c("?"), stringsAsFactors = FALSE)
# conver String to Date
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
# choose Data between 007-02-01 and 2007-02-02
data <- filter(data, Date >= as.Date("2007-2-1") & Date <= as.Date("2007-2-2"))
# merger Date and Time in new column
data <- data %>% mutate(Date_Time = paste(Date, Time, sep=" ")) %>% select(-c("Date", "Time"))
# Format dateTime Column
data$Date_Time <- as.POSIXct(data$Date_Time)
data
}
createPNGPlot <- function(file_name){
dev.copy(png,file_name,  height=480, width=480)
dev.off()
}
data <- prepareData()
with(data, {
plot(Date_Time, Sub_metering_1, type="l",
ylab="Energy sub metering", xlab="")
lines(Date_Time, Sub_metering_2,col='Red')
lines(Date_Time, Sub_metering_3,col='Blue')
}) %>% layout(autosize = FALSE, width = 480, height = 480)
legend("topright", col=c("black", "red", "blue"), lty = c(1,1,1), c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
createPNGPlot("plot3.png")
# English for Ubuntu
#Sys.setlocale("LC_TIME", "C")
library(dplyr)
library(data.table)
prepareData <- function(){
# read Data: file "household_power_consumption.txt" must be available in the working directory
data <- fread("./household_power_consumption.txt", header=TRUE, sep = ";", na.strings = c("?"), stringsAsFactors = FALSE)
# conver String to Date
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
# choose Data between 007-02-01 and 2007-02-02
data <- filter(data, Date >= as.Date("2007-2-1") & Date <= as.Date("2007-2-2"))
# merger Date and Time in new column
data <- data %>% mutate(Date_Time = paste(Date, Time, sep=" ")) %>% select(-c("Date", "Time"))
# Format dateTime Column
data$Date_Time <- as.POSIXct(data$Date_Time)
data
}
createPNGPlot <- function(data, file_name){
png(file=file_name,height=480, width=480)
with(data, {
plot(Date_Time, Sub_metering_1, type="l",
ylab="Energy sub metering", xlab="")
lines(Date_Time, Sub_metering_2,col='Red')
lines(Date_Time, Sub_metering_3,col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty = c(1,1,1), c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
}
data <- prepareData()
createPNGPlot(data, "plot3.png")
